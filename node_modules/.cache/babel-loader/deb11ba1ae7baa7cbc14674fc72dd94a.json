{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Common/CustomInput/CustomInput.js\";\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\"; // @material-ui/icons\n\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\"; // core components\n\nimport styles from \"../../../assets/jss/material-dashboard-react/components/customInputStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomInput(props) {\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    success,\n    inputIcon\n  } = props;\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true\n  });\n  const marginTop = classNames({\n    [classes.marginTop]: labelText === undefined\n  });\n  return /*#__PURE__*/React.createElement(FormControl, Object.assign({}, formControlProps, {\n    className: formControlProps.className + \" \" + classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }), labelText !== undefined ? /*#__PURE__*/React.createElement(InputLabel, Object.assign({\n    className: classes.labelRoot + labelClasses,\n    htmlFor: id\n  }, labelProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), labelText) : null, /*#__PURE__*/React.createElement(Input, Object.assign({\n    classes: {\n      root: marginTop,\n      disabled: classes.disabled,\n      underline: underlineClasses\n    },\n    id: id\n  }, inputProps, {\n    startAdornment: inputIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  })), error ? /*#__PURE__*/React.createElement(Clear, {\n    className: classes.feedback + \" \" + classes.labelRootError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }) : success ? /*#__PURE__*/React.createElement(Check, {\n    className: classes.feedback + \" \" + classes.labelRootSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }) : null);\n}\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  inputIcon: PropTypes.node\n};","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Common/CustomInput/CustomInput.js"],"names":["React","classNames","PropTypes","makeStyles","FormControl","InputLabel","Input","Clear","Check","styles","useStyles","CustomInput","props","classes","formControlProps","labelText","id","labelProps","inputProps","error","success","inputIcon","labelClasses","labelRootError","labelRootSuccess","underlineClasses","underlineError","underlineSuccess","underline","marginTop","undefined","className","formControl","labelRoot","root","disabled","feedback","propTypes","node","object","string","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\n// @material-ui/icons\nimport Clear from \"@material-ui/icons/Clear\";\nimport Check from \"@material-ui/icons/Check\";\n// core components\nimport styles from \"../../../assets/jss/material-dashboard-react/components/customInputStyle.js\";\n\nconst useStyles = makeStyles(styles);\n\nexport default function CustomInput(props) {\n  const classes = useStyles();\n  const {\n    formControlProps,\n    labelText,\n    id,\n    labelProps,\n    inputProps,\n    error,\n    success,\n    inputIcon,\n  } = props;\n\n  const labelClasses = classNames({\n    [\" \" + classes.labelRootError]: error,\n    [\" \" + classes.labelRootSuccess]: success && !error\n  });\n  const underlineClasses = classNames({\n    [classes.underlineError]: error,\n    [classes.underlineSuccess]: success && !error,\n    [classes.underline]: true\n  });\n  const marginTop = classNames({\n    [classes.marginTop]: labelText === undefined\n  });\n  return (\n    <FormControl\n      {...formControlProps}\n      className={formControlProps.className + \" \" + classes.formControl}\n    >\n      {labelText !== undefined ? (\n        <InputLabel\n          className={classes.labelRoot + labelClasses}\n          htmlFor={id}\n          {...labelProps}\n        >\n          {labelText}\n        </InputLabel>\n      ) : null}\n      <Input\n        classes={{\n          root: marginTop,\n          disabled: classes.disabled,\n          underline: underlineClasses\n        }}\n        id={id}\n        {...inputProps}\n        startAdornment={inputIcon}\n      />\n      {error ? (\n        <Clear className={classes.feedback + \" \" + classes.labelRootError} />\n      ) : success ? (\n        <Check className={classes.feedback + \" \" + classes.labelRootSuccess} />\n      ) : null}\n    </FormControl>\n  );\n}\n\nCustomInput.propTypes = {\n  labelText: PropTypes.node,\n  labelProps: PropTypes.object,\n  id: PropTypes.string,\n  inputProps: PropTypes.object,\n  formControlProps: PropTypes.object,\n  error: PropTypes.bool,\n  success: PropTypes.bool,\n  inputIcon: PropTypes.node,\n};\n"]},"metadata":{},"sourceType":"module"}