{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Form/Form.js\";\nimport React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport Input from './Input';\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport Card from '../Common/Card/Card';\nimport CardHeader from '../Common/Card/CardHeader';\nimport CardBody from '../Common/Card/CardBody';\nimport CardFooter from '../Common/Card/CardFooter';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSubmitButton = () => {\n      const submitButton = this.props.parentForm ? /*#__PURE__*/React.createElement(Button, {\n        disabled: this.state.pendingRequiredAnswers,\n        color: \"warning\",\n        type: \"button\",\n        onClick: this.createUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, \"Guardar\") : '';\n      return submitButton;\n    };\n\n    this.renderBackButton = () => {\n      return this.props.parentForm ? /*#__PURE__*/React.createElement(Button, {\n        color: \"warning\",\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }, \"Regresar\") : '';\n    };\n\n    this.renderQuestions = () => {\n      return this.props.form.questions.map((question, index) => {\n        this.completedForm.completedQuestions.push({});\n        return /*#__PURE__*/React.createElement(Input, {\n          question: question,\n          onStateChange: this.handleStateChange,\n          requiredQuestion: this.handleRequiredQuestions,\n          index: index,\n          key: 'k' + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 20\n          }\n        });\n      });\n    };\n\n    this.handleStateChange = (completedQuestion, index) => {\n      this.completedForm.completedQuestions[index] = completedQuestion;\n      if (this.props.subform) this.props.onStateChange(this.completedForm.completedQuestions);\n      if (!this.props.subform) console.log('FORM: ', this.completedForm);\n    };\n\n    this.handleRequiredQuestions = (wasAnswered, index) => {\n      this.answersRequired[index] = wasAnswered;\n      const pendingRequiredAnswers = this.answersRequired.includes(false);\n      this.setState({\n        pendingRequiredAnswers\n      });\n    };\n\n    this.state = {\n      pendingRequiredAnswers: true\n    };\n    this.completedForm = {};\n    if (!this.props.subform) this.completedForm['formName'] = this.props.form.formName;\n    this.completedForm['completedQuestions'] = [];\n    this.answersRequired = [];\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      md: 12,\n      sm: 12,\n      lg: 12,\n      spacing: 0,\n      zeroMinWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }\n    }, this.props.form.formName)), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, this.renderQuestions()), /*#__PURE__*/React.createElement(CardFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 29\n      }\n    }, this.renderBackButton(), this.renderSubmitButton())))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Form/Form.js"],"names":["React","Component","Grid","Input","Button","Card","CardHeader","CardBody","CardFooter","Form","constructor","props","renderSubmitButton","submitButton","parentForm","state","pendingRequiredAnswers","createUser","renderBackButton","renderQuestions","form","questions","map","question","index","completedForm","completedQuestions","push","handleStateChange","handleRequiredQuestions","completedQuestion","subform","onStateChange","console","log","wasAnswered","answersRequired","includes","setState","formName","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport Input from './Input';\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport Card from '../Common/Card/Card';\nimport CardHeader from '../Common/Card/CardHeader';\nimport CardBody from '../Common/Card/CardBody';\nimport CardFooter from '../Common/Card/CardFooter';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pendingRequiredAnswers: true\n        }\n        this.completedForm = {}\n        if (!this.props.subform) this.completedForm['formName'] = this.props.form.formName;\n        this.completedForm['completedQuestions'] = [];\n        this.answersRequired = [];\n    }\n    componentDidMount() {\n\n    }\n\n    render() {\n        return (<>\n            <Grid container item xs={12} md={12} sm={12} lg={12} spacing={0} zeroMinWidth={true}>\n                <Grid item sm={2} />\n                <Grid item sm = {8}>\n                    <Card>\n                        <CardHeader color = 'warning'>\n                            <h3>{this.props.form.formName}</h3>\n                        </CardHeader>\n                        <CardBody>\n                            {this.renderQuestions()}\n                        </CardBody>\n                        <CardFooter> \n                            <div>\n                                {this.renderBackButton()}   \n                                {this.renderSubmitButton()}   \n                            </div>    \n                         </CardFooter>\n                    </Card>\n                </Grid>\n                <Grid item sm={2} />\n            </Grid>\n        </>)\n    }\n\n    renderSubmitButton = () => {\n        const submitButton = this.props.parentForm ?\n                <Button disabled={this.state.pendingRequiredAnswers} color=\"warning\" type=\"button\" onClick={this.createUser}>\n                    Guardar\n                </Button>\n            : '';\n        return submitButton;\n    }\n\n    renderBackButton = () => {\n        return this.props.parentForm ?\n                    <Button color=\"warning\" type=\"button\">\n                        Regresar\n                    </Button>\n                : '';\n    }\n\n    renderQuestions = () => {\n\n        return this.props.form.questions.map((question, index) => {\n            this.completedForm.completedQuestions.push({});\n            return <Input \n                    question={question} \n                    onStateChange={this.handleStateChange} \n                    requiredQuestion={this.handleRequiredQuestions} \n                    index={index} \n                    key = {'k' + index}/>\n        })\n    }\n\n    handleStateChange = (completedQuestion, index) => {\n        this.completedForm.completedQuestions[index] = completedQuestion;\n        if (this.props.subform) this.props.onStateChange(this.completedForm.completedQuestions);\n        if (!this.props.subform) console.log('FORM: ', this.completedForm);\n    }\n\n    handleRequiredQuestions = (wasAnswered, index) => {\n        this.answersRequired[index] = wasAnswered;\n        const pendingRequiredAnswers = this.answersRequired.includes(false);\n        this.setState({ pendingRequiredAnswers })\n    }\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}