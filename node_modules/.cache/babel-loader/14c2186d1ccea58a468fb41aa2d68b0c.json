{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Form/RadioInput.js\";\nimport React, { Component } from 'react';\nimport Form from './Form';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core';\n\nclass RadioInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      let {\n        value\n      } = event.target;\n      this.hasSubquestions = this.subquestionsExist(value);\n      this.storeQuestion(value);\n      this.setState({\n        value\n      });\n    };\n\n    this.renderOptions = () => {\n      return this.props.question.inputType.options.map((option, index) => {\n        return /*#__PURE__*/React.createElement(FormControlLabel, {\n          value: option,\n          control: /*#__PURE__*/React.createElement(Radio, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 62\n            }\n          }),\n          label: option,\n          key: 'o' + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 20\n          }\n        });\n      });\n    };\n\n    this.subquestionsExist = key => {\n      if (!this.props.question.inputType.subquestions) return false;\n      if (!this.props.question.inputType.subquestions[key]) return false;\n      return true;\n    };\n\n    this.renderSubForm = key => {\n      this.hasSubquestions = this.subquestionsExist(key);\n      if (this.hasSubquestions === false) return null;\n      return /*#__PURE__*/React.createElement(Form, {\n        form: {\n          questions: this.props.question.inputType.subquestions[key]\n        },\n        subform: true,\n        onStateChange: this.handleStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.storeQuestion = answer => {\n      let completedQuestion = {\n        question: this.props.question.question,\n        answer\n      };\n      console.log('MANUELITO GOING TO STORE WITH: ', this.hasSubquestions);\n      if (this.hasSubquestions === true) completedQuestion['completedSubquestions'] = this.subquestions;\n      this.props.onStateChange(completedQuestion, this.props.index);\n    };\n\n    this.handleStateChange = subquestions => {\n      if (this.hasSubquestions === false) return;\n      this.subquestions = subquestions;\n      this.storeQuestion(this.state.value);\n    };\n\n    this.state = {\n      value: props.question.inputType.options[0]\n    };\n    this.subquestions = [];\n    this.hasSubquestions = false;\n  }\n\n  componentDidMount() {\n    this.hasSubquestions = this.subquestionsExist(this.state.value);\n    this.storeQuestion(this.state.value);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, this.props.question.question), /*#__PURE__*/React.createElement(RadioGroup, {\n      \"aria-label\": \"gender\",\n      name: \"gender1\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, this.renderOptions()), this.renderSubForm(this.state.value)));\n  }\n\n}\n\nexport default RadioInput;","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Form/RadioInput.js"],"names":["React","Component","Form","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","RadioInput","constructor","props","handleChange","event","value","target","hasSubquestions","subquestionsExist","storeQuestion","setState","renderOptions","question","inputType","options","map","option","index","key","subquestions","renderSubForm","questions","handleStateChange","answer","completedQuestion","console","log","onStateChange","state","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,gBAA5B,EAA8CC,WAA9C,EAA2DC,SAA3D,QAA4E,mBAA5E;;AAEA,MAAMC,UAAN,SAAyBP,SAAzB,CAAkC;AAC9BQ,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAclBC,YAdkB,GAcFC,KAAD,IAAW;AACtB,UAAI;AAACC,QAAAA;AAAD,UAAUD,KAAK,CAACE,MAApB;AACA,WAAKC,eAAL,GAAuB,KAAKC,iBAAL,CAAuBH,KAAvB,CAAvB;AACA,WAAKI,aAAL,CAAmBJ,KAAnB;AACA,WAAKK,QAAL,CAAc;AAACL,QAAAA;AAAD,OAAd;AACH,KAnBiB;;AAAA,SAiClBM,aAjCkB,GAiCF,MAAM;AAClB,aAAO,KAAKT,KAAL,CAAWU,QAAX,CAAoBC,SAApB,CAA8BC,OAA9B,CAAsCC,GAAtC,CAA0C,CAACC,MAAD,EAASC,KAAT,KAAmB;AAChE,4BAAO,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAED,MAAzB;AAAiC,UAAA,OAAO,eAAE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA1C;AAAqD,UAAA,KAAK,EAAEA,MAA5D;AAAoE,UAAA,GAAG,EAAI,MAAMC,KAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFM,CAAP;AAGH,KArCiB;;AAAA,SAsClBT,iBAtCkB,GAsCGU,GAAD,IAAS;AACzB,UAAG,CAAC,KAAKhB,KAAL,CAAWU,QAAX,CAAoBC,SAApB,CAA8BM,YAAlC,EAAgD,OAAO,KAAP;AAChD,UAAG,CAAC,KAAKjB,KAAL,CAAWU,QAAX,CAAoBC,SAApB,CAA8BM,YAA9B,CAA2CD,GAA3C,CAAJ,EAAqD,OAAO,KAAP;AACrD,aAAO,IAAP;AACH,KA1CiB;;AAAA,SA4ClBE,aA5CkB,GA4CDF,GAAD,IAAS;AACrB,WAAKX,eAAL,GAAuB,KAAKC,iBAAL,CAAuBU,GAAvB,CAAvB;AACA,UAAG,KAAKX,eAAL,KAAyB,KAA5B,EAAmC,OAAO,IAAP;AACnC,0BAAO,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAACc,UAAAA,SAAS,EAAE,KAAKnB,KAAL,CAAWU,QAAX,CAAoBC,SAApB,CAA8BM,YAA9B,CAA2CD,GAA3C;AAAZ,SAAd;AAA4E,QAAA,OAAO,MAAnF;AAAoF,QAAA,aAAa,EAAI,KAAKI,iBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAhDiB;;AAAA,SAkDlBb,aAlDkB,GAkDDc,MAAD,IAAY;AACxB,UAAIC,iBAAiB,GAAG;AACpBZ,QAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWU,QAAX,CAAoBA,QADV;AAEpBW,QAAAA;AAFoB,OAAxB;AAIAE,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+C,KAAKnB,eAApD;AACA,UAAG,KAAKA,eAAL,KAAyB,IAA5B,EAAkCiB,iBAAiB,CAAC,uBAAD,CAAjB,GAA6C,KAAKL,YAAlD;AAClC,WAAKjB,KAAL,CAAWyB,aAAX,CAAyBH,iBAAzB,EAA4C,KAAKtB,KAAL,CAAWe,KAAvD;AACH,KA1DiB;;AAAA,SA4DlBK,iBA5DkB,GA4DGH,YAAD,IAAkB;AAClC,UAAG,KAAKZ,eAAL,KAAyB,KAA5B,EAAmC;AACnC,WAAKY,YAAL,GAAoBA,YAApB;AACA,WAAKV,aAAL,CAAmB,KAAKmB,KAAL,CAAWvB,KAA9B;AACH,KAhEiB;;AAEd,SAAKuB,KAAL,GAAa;AACTvB,MAAAA,KAAK,EAAEH,KAAK,CAACU,QAAN,CAAeC,SAAf,CAAyBC,OAAzB,CAAiC,CAAjC;AADE,KAAb;AAGA,SAAKK,YAAL,GAAoB,EAApB;AACA,SAAKZ,eAAL,GAAuB,KAAvB;AACH;;AAEDsB,EAAAA,iBAAiB,GAAE;AACf,SAAKtB,eAAL,GAAuB,KAAKC,iBAAL,CAAuB,KAAKoB,KAAL,CAAWvB,KAAlC,CAAvB;AACA,SAAKI,aAAL,CAAmB,KAAKmB,KAAL,CAAWvB,KAA9B;AACH;;AASDyB,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACK,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAK5B,KAAL,CAAWU,QAAX,CAAoBA,QAAnD,CADJ,eAEI,oBAAC,UAAD;AAAY,oBAAW,QAAvB;AAAgC,MAAA,IAAI,EAAC,SAArC;AAA+C,MAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWvB,KAAjE;AAAwE,MAAA,QAAQ,EAAE,KAAKF,YAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKQ,aAAL,EADL,CAFJ,EAKK,KAAKS,aAAL,CAAmB,KAAKQ,KAAL,CAAWvB,KAA9B,CALL,CADL,CAAP;AASH;;AAhC6B;;AAoElC,eAAeL,UAAf","sourcesContent":["import React, {Component} from 'react';\nimport Form from './Form';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel } from '@material-ui/core';\n\nclass RadioInput extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value: props.question.inputType.options[0]\n        }\n        this.subquestions = [];\n        this.hasSubquestions = false;\n    }\n\n    componentDidMount(){\n        this.hasSubquestions = this.subquestionsExist(this.state.value);\n        this.storeQuestion(this.state.value);\n    }\n\n    handleChange = (event) => {\n        let {value} = event.target;\n        this.hasSubquestions = this.subquestionsExist(value);\n        this.storeQuestion(value);\n        this.setState({value});\n    }\n    \n    render(){\n        return <div>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">{this.props.question.question}</FormLabel>\n                        <RadioGroup aria-label=\"gender\" name=\"gender1\" value={this.state.value} onChange={this.handleChange}>\n                            {this.renderOptions()}\n                        </RadioGroup>\n                        {this.renderSubForm(this.state.value)}\n                    </FormControl>\n                </div>\n    }\n\n    renderOptions = () => {\n        return this.props.question.inputType.options.map((option, index) => {\n            return <FormControlLabel value={option} control={<Radio />} label={option} key = {'o' + index}/>\n        })\n    }\n    subquestionsExist = (key) => {\n        if(!this.props.question.inputType.subquestions) return false;\n        if(!this.props.question.inputType.subquestions[key]) return false;\n        return true;\n    }\n\n    renderSubForm = (key) => {\n        this.hasSubquestions = this.subquestionsExist(key);\n        if(this.hasSubquestions === false) return null;\n        return <Form form = {{questions: this.props.question.inputType.subquestions[key]}} subform onStateChange = {this.handleStateChange}/>\n    }\n\n    storeQuestion = (answer) => {\n        let completedQuestion = {\n            question: this.props.question.question,\n            answer\n        }\n        console.log('MANUELITO GOING TO STORE WITH: ', this.hasSubquestions);\n        if(this.hasSubquestions === true) completedQuestion['completedSubquestions'] = this.subquestions;\n        this.props.onStateChange(completedQuestion, this.props.index);\n    }\n\n    handleStateChange = (subquestions) => {\n        if(this.hasSubquestions === false) return;\n        this.subquestions = subquestions;\n        this.storeQuestion(this.state.value)\n    }\n}\n\nexport default RadioInput;"]},"metadata":{},"sourceType":"module"}