{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Content/Products.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport ProductCard from './ProductCard';\nimport ProductChart from './ProductChart';\nimport { getAllProducts, getProductsByInsurance, getAllBusiness, getAllCovers } from './../../actions';\n\nclass Product extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildProductManager = () => {\n      if (this.props.products.length === 0 || this.props.businessList.length === 0 || this.props.covers.length === 0 || this.props.insurances.length === 0) return;\n      this.manager = this.props.products.map(product => {\n        let newProduct = Object.assign({}, product);\n        newProduct.business = this.props.businessList.find(business => product.business === business._id);\n        newProduct.covers = this.props.covers.filter(cover => cover.product === product._id);\n        newProduct.insurance = this.props.insurances.find(insurance => insurance._id === product.insurance);\n        return newProduct;\n      });\n    };\n\n    this.renderProducts = () => {\n      return this.manager.map((product, index) => {\n        return /*#__PURE__*/React.createElement(ProductCard, {\n          product: product,\n          key: index,\n          onSelect: this.onSelectCard,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 20\n          }\n        });\n      });\n    };\n\n    this.renderTable = () => {\n      return /*#__PURE__*/React.createElement(ProductChart, {\n        product: this.state.currentProduct,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }\n      });\n    };\n\n    this.onSelectCard = currentProduct => {\n      this.setState({\n        currentProduct,\n        showTable: true\n      });\n    };\n\n    this.manager = [];\n    this.state = {\n      showTable: false,\n      currentProduct: {}\n    };\n  }\n\n  async componentDidMount() {\n    if (this.props.params.insurance) {\n      await this.props.getProductsByInsurance(this.props.params.insurance._id);\n    } else {\n      await this.props.getAllProducts();\n    }\n\n    await this.props.getAllBusiness();\n    await this.props.getAllCovers();\n  }\n\n  render() {\n    this.buildProductManager();\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }\n    }, this.state.showTable === false ? this.renderProducts() : this.renderTable());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.product.products,\n    businessList: state.business.businesses,\n    covers: state.cover.covers,\n    insurances: state.insurance.insurances\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getAllProducts,\n  getProductsByInsurance,\n  getAllBusiness,\n  getAllCovers\n})(Product);","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Content/Products.js"],"names":["React","Component","connect","Grid","ProductCard","ProductChart","getAllProducts","getProductsByInsurance","getAllBusiness","getAllCovers","Product","constructor","props","buildProductManager","products","length","businessList","covers","insurances","manager","map","product","newProduct","Object","assign","business","find","_id","filter","cover","insurance","renderProducts","index","onSelectCard","renderTable","state","currentProduct","setState","showTable","componentDidMount","params","render","mapStateToProps","businesses"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Grid} from '@material-ui/core';\nimport ProductCard from './ProductCard';\nimport ProductChart from './ProductChart';\nimport {getAllProducts, getProductsByInsurance, getAllBusiness, getAllCovers} from './../../actions';\n\nclass Product extends Component{\n    constructor(props){\n        super(props);\n        this.manager = [];\n        this.state = {\n            showTable: false,\n            currentProduct: {}\n        }\n    }\n\n    async componentDidMount(){\n        if(this.props.params.insurance){\n            await this.props.getProductsByInsurance(this.props.params.insurance._id);\n        }else{\n            await this.props.getAllProducts();\n        }\n        await this.props.getAllBusiness();\n        await this.props.getAllCovers();\n    }\n\n    render(){\n        this.buildProductManager();\n        return <Grid container spacing = {1}>\n            {this.state.showTable === false ? this.renderProducts(): this.renderTable()}\n        </Grid>\n    }\n\n    buildProductManager = () => {\n        if(this.props.products.length === 0 || this.props.businessList.length === 0 \n            || this.props.covers.length === 0 || this.props.insurances.length === 0) return;\n        \n        this.manager = this.props.products.map(product => {\n            let newProduct = Object.assign({}, product);\n            newProduct.business = this.props.businessList.find(business => product.business === business._id);\n            newProduct.covers = this.props.covers.filter(cover => cover.product === product._id);\n            newProduct.insurance = this.props.insurances.find(insurance => insurance._id === product.insurance);\n            return newProduct;\n        });\n    }\n\n    renderProducts = () => {\n        return this.manager.map((product, index) => {\n            return <ProductCard product = {product} key = {index} onSelect = {this.onSelectCard}/>\n        })\n    }\n\n    renderTable = () => {\n        return <ProductChart product = {this.state.currentProduct}/>\n    }\n\n    onSelectCard = (currentProduct) => {\n        this.setState({currentProduct, showTable: true});\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.product.products,\n        businessList: state.business.businesses, \n        covers: state.cover.covers, \n        insurances: state.insurance.insurances\n    }\n}\n\nexport default connect(mapStateToProps, {getAllProducts, getProductsByInsurance, getAllBusiness, getAllCovers})(Product);"]},"metadata":{},"sourceType":"module"}