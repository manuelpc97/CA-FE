{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Form/TextInput.js\";\nimport '../../styles/Input.css';\nimport React, { Component } from 'react';\nimport CustomInput from '../Common/CustomInput/CustomInput';\nimport validateValue from '../../helpers/validate/regexInput';\nimport { isEmpty } from 'lodash';\n\nclass TextInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onValueChange = event => {\n      let {\n        value\n      } = event.target;\n      this.storeQuestion(value, this.props.question.inputType.type);\n      this.setState({\n        value\n      });\n    };\n\n    this.getInputType = () => {\n      return this.props.question.inputType.type === 'alpha' ? 'text' : this.props.question.inputType.type;\n    };\n\n    this.storeQuestion = (answer, type) => {\n      const isValid = validateValue(answer, type);\n      this.setState({\n        isValidValue: isValid\n      });\n\n      if (isValid) {\n        let completedQuestion = {\n          question: this.props.question.question,\n          answer\n        };\n        this.props.onStateChange(completedQuestion, this.props.index);\n      }\n\n      const isRequired = this.props.question.inputType.required ? isValid && !isEmpty(answer) : true;\n      this.props.requiredQuestion(isRequired, this.props.index);\n    };\n\n    this.state = {\n      value: '',\n      isValidValue: false\n    };\n  }\n\n  componentDidMount() {\n    this.storeQuestion(this.state.value);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: this.props.question.question,\n      error: !this.state.isValidValue,\n      inputProps: {\n        value: this.state.value,\n        onChange: this.onValueChange,\n        type: this.getInputType(),\n        multiline: this.props.question.inputType.tag === 'textarea',\n        rows: this.props.question.inputType.tag === 'textarea' ? 5 : 1\n      },\n      formControlProps: {\n        fullWidth: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }), !this.state.isValidValue ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 48\n      }\n    }, this.props.question.question, \" invalido.\") : '');\n  }\n\n}\n\nexport default TextInput;","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Form/TextInput.js"],"names":["React","Component","CustomInput","validateValue","isEmpty","TextInput","constructor","props","onValueChange","event","value","target","storeQuestion","question","inputType","type","setState","getInputType","answer","isValid","isValidValue","completedQuestion","onStateChange","index","isRequired","required","requiredQuestion","state","componentDidMount","render","onChange","multiline","tag","rows","fullWidth","fontSize","color"],"mappings":"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","sourcesContent":["import '../../styles/Input.css';\nimport React, { Component } from 'react';\nimport CustomInput from '../Common/CustomInput/CustomInput';\nimport validateValue from '../../helpers/validate/regexInput';\nimport { isEmpty } from 'lodash';\n\nclass TextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            isValidValue: false,\n        }\n    }\n\n    componentDidMount() {\n        this.storeQuestion(this.state.value);\n    }\n\n    onValueChange = (event) => {\n        let { value } = event.target;\n        this.storeQuestion(value, this.props.question.inputType.type);\n        this.setState({ value });\n    }\n\n    getInputType = () => {\n        return this.props.question.inputType.type === 'alpha' ? 'text' : this.props.question.inputType.type;\n    }\n\n    render() {\n        return (\n            <>\n                <CustomInput\n                    labelText={this.props.question.question}\n                    error={!this.state.isValidValue}\n                    inputProps={{\n                        value: this.state.value,\n                        onChange: this.onValueChange,\n                        type: this.getInputType(),\n                        multiline: this.props.question.inputType.tag === 'textarea',\n                        rows: this.props.question.inputType.tag === 'textarea' ? 5 : 1\n                    }}\n                    formControlProps={{\n                        fullWidth: true\n                    }}\n                />\n                {\n                    !this.state.isValidValue ? <p style={{\n                        fontSize: '11px',\n                        color: 'red'\n                    }}>{this.props.question.question} invalido.</p> : ''\n                }\n            </>\n        )\n    }\n\n    storeQuestion = (answer, type) => {\n        const isValid = validateValue(answer, type);\n        this.setState({ isValidValue: isValid })\n        if (isValid) {\n            let completedQuestion = {\n                question: this.props.question.question,\n                answer\n            }\n            this.props.onStateChange(completedQuestion, this.props.index);\n        }\n        const isRequired = this.props.question.inputType.required ? isValid && !isEmpty(answer) : true;\n        this.props.requiredQuestion(isRequired, this.props.index);\n    }\n}\n\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}