{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/SingUp/SingUp.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../../styles/SingUp.css';\nimport Card from \"../Common/Card/Card\";\nimport CardHeader from \"../Common/Card/CardHeader\";\nimport CardBody from \"../Common/Card/CardBody\";\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport CustomInput from \"../Common/CustomInput/CustomInput.js\";\nimport { singUp, changePath } from '../../actions';\n\nclass SingUp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getInputValues = event => {\n      const {\n        id,\n        value\n      } = event.target;\n      this.setState({\n        [id]: value,\n        [`is${event.target.id}Wrong`]: this.validateInputs(id, value)\n      });\n      this.disableSaveButton();\n    };\n\n    this.disableSaveButton = () => {\n      const {\n        isfirstNameWrong,\n        islastNameWrong,\n        isdocumentIdWrong,\n        isemailWrong,\n        iscellphoneWrong,\n        isusernameWrong,\n        ispasswordWrong\n      } = this.state;\n      const isValid = [isfirstNameWrong, islastNameWrong, isdocumentIdWrong, isemailWrong, iscellphoneWrong, isusernameWrong, ispasswordWrong].includes(true);\n      this.setState({\n        isValidData: !isValid\n      });\n    };\n\n    this.validateInputs = (inputId, value) => {\n      let isValid = false;\n\n      switch (inputId) {\n        case 'firstName':\n          isValid = /^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/.test(value);\n          break;\n\n        case 'lastName':\n          isValid = /^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/.test(value);\n          break;\n\n        case 'documentId':\n          isValid = /^\\(?([0-9]{4})\\)?[-]?([0-9]{4})[-]?([0-9]{5})$/.test(value);\n          break;\n\n        case 'email':\n          isValid = /\\S+@\\S+\\.\\S+/.test(value);\n          break;\n\n        case 'cellphone':\n          isValid = /^\\(?([0-9]{8})\\)?$/.test(value);\n          break;\n\n        case 'username':\n          isValid = /^[a-zA-Z0-9-!_]{5,}$/.test(value);\n          break;\n\n        case 'password':\n          isValid = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/.test(value);\n          break;\n\n        default:\n          console.log('input id is not supported');\n          break;\n      }\n\n      return !isValid;\n    };\n\n    this.createUser = async () => {\n      const {\n        firstName,\n        lastName,\n        documentId,\n        email,\n        cellphone,\n        username,\n        password\n      } = this.state;\n      const {\n        error\n      } = this.props;\n      await this.props.singUp({\n        firstName,\n        lastName,\n        id: documentId,\n        email,\n        phone: cellphone,\n        username,\n        password\n      });\n\n      if (!error.error) {\n        this.props.changePath('');\n      } else {\n        console.log('error --->', error.message);\n      }\n    };\n\n    this.returnToLogin = () => {\n      this.props.changePath('');\n    };\n\n    this.state = {\n      username: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      documentId: '',\n      email: '',\n      cellphone: '',\n      isfirstNameWrong: false,\n      islastNameWrong: false,\n      isdocumentIdWrong: false,\n      isemailWrong: false,\n      iscellphoneWrong: false,\n      isusernameWrong: false,\n      ispasswordWrong: false,\n      isValidData: false\n    };\n  }\n\n  render() {\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      documentId,\n      email,\n      cellphone,\n      isfirstNameWrong,\n      islastNameWrong,\n      isdocumentIdWrong,\n      isemailWrong,\n      iscellphoneWrong,\n      isusernameWrong,\n      ispasswordWrong,\n      isValidData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-light\",\n      style: {\n        background: 'linear-gradient(87deg, #e72339 0, #ff9800 100%)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        color: 'white',\n        letterSpacing: 30,\n        cursor: 'pointer'\n      },\n      onClick: this.returnToLogin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, \"SEGUR\\xDA\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: 'cardForm',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 29\n      }\n    }, \"Crea tu cuenta\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    }, \"Completa el siguiente formulario\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Nombre\",\n      id: \"firstName\",\n      error: isfirstNameWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: firstName,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }), isfirstNameWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 60\n      }\n    }, \"Nombre invalido. Solo se permiten letras\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Apellido\",\n      id: \"lastName\",\n      error: islastNameWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: lastName,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }), islastNameWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 59\n      }\n    }, \"Apellido invalido. Solo se permiten letras\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Identidad\",\n      id: \"documentId\",\n      error: isdocumentIdWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: documentId,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 37\n      }\n    }), isdocumentIdWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 61\n      }\n    }, \"N\\xFAmero de Identidad Invalido. Usar guiones\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Correo Electr\\xF3nico\",\n      id: \"email\",\n      error: isemailWrong,\n      formControlProps: {\n        fullWidth: true,\n        type: \"email\"\n      },\n      inputProps: {\n        value: email,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 37\n      }\n    }), isemailWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 56\n      }\n    }, \"Correo Electr\\xF3nico invalido.\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Celular\",\n      id: \"cellphone\",\n      error: iscellphoneWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: cellphone,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 37\n      }\n    }), iscellphoneWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 60\n      }\n    }, \"N\\xFAmero de celular invalido.\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Nombre de Usuario\",\n      id: \"username\",\n      error: isusernameWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: username,\n        onChange: this.getInputValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }), isusernameWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 59\n      }\n    }, \"Nombre de usuario invalido. Usar al menos cinco caracteres\") : ''), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row col-xs-12 col-sm-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CustomInput, {\n      labelText: \"Contrase\\xF1a\",\n      id: \"password\",\n      isValid: ispasswordWrong,\n      formControlProps: {\n        fullWidth: true\n      },\n      inputProps: {\n        value: password,\n        onChange: this.getInputValues,\n        type: \"password\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 37\n      }\n    }), ispasswordWrong ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        fontSize: '11px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 59\n      }\n    }, \"Contrase\\xF1a invalida. Usar al menos 8 caracteres, una letra may\\xFAscula y un n\\xFAmero\") : ''))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"submitButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !isValidData,\n      color: \"primary\",\n      type: \"button\",\n      onClick: this.createUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 29\n      }\n    }, \"Crear Usuario\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  const {\n    error\n  } = state;\n  return {\n    error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  singUp,\n  changePath\n})(SingUp);","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/SingUp/SingUp.js"],"names":["React","Component","connect","Card","CardHeader","CardBody","Button","CustomInput","singUp","changePath","SingUp","constructor","props","getInputValues","event","id","value","target","setState","validateInputs","disableSaveButton","isfirstNameWrong","islastNameWrong","isdocumentIdWrong","isemailWrong","iscellphoneWrong","isusernameWrong","ispasswordWrong","state","isValid","includes","isValidData","inputId","test","console","log","createUser","firstName","lastName","documentId","email","cellphone","username","password","error","phone","message","returnToLogin","render","background","color","letterSpacing","cursor","fullWidth","onChange","fontSize","type","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../../styles/SingUp.css';\nimport Card from \"../Common/Card/Card\";\nimport CardHeader from \"../Common/Card/CardHeader\";\nimport CardBody from \"../Common/Card/CardBody\";\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport CustomInput from \"../Common/CustomInput/CustomInput.js\";\nimport { singUp, changePath } from '../../actions';\n\nclass SingUp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            firstName: '',\n            lastName: '',\n            documentId: '',\n            email: '',\n            cellphone: '',\n            isfirstNameWrong: false,\n            islastNameWrong: false,\n            isdocumentIdWrong: false,\n            isemailWrong: false,\n            iscellphoneWrong: false,\n            isusernameWrong: false,\n            ispasswordWrong: false,\n            isValidData: false,\n        }\n    }\n\n    getInputValues = (event) => {\n        const { id, value } = event.target;\n        this.setState({\n            [id]: value,\n            [`is${event.target.id}Wrong`]: this.validateInputs(id, value),\n        });\n        this.disableSaveButton();\n    }\n\n    disableSaveButton = () => {\n        const { isfirstNameWrong,\n            islastNameWrong,\n            isdocumentIdWrong,\n            isemailWrong,\n            iscellphoneWrong,\n            isusernameWrong,\n            ispasswordWrong, } = this.state\n\n        const isValid = [isfirstNameWrong,\n            islastNameWrong,\n            isdocumentIdWrong,\n            isemailWrong,\n            iscellphoneWrong,\n            isusernameWrong,\n            ispasswordWrong].includes(true);\n\n        this.setState({ isValidData: !isValid })\n\n    }\n    validateInputs = (inputId, value) => {\n        let isValid = false;\n        switch (inputId) {\n            case 'firstName':\n                isValid = (/^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/).test(value)\n                break;\n            case 'lastName':\n                isValid = (/^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/).test(value)\n                break;\n            case 'documentId':\n                isValid = (/^\\(?([0-9]{4})\\)?[-]?([0-9]{4})[-]?([0-9]{5})$/).test(value)\n                break;\n            case 'email':\n                isValid = (/\\S+@\\S+\\.\\S+/).test(value)\n                break;\n            case 'cellphone':\n                isValid = (/^\\(?([0-9]{8})\\)?$/).test(value)\n                break;\n            case 'username':\n                isValid = (/^[a-zA-Z0-9-!_]{5,}$/).test(value)\n                break;\n            case 'password':\n                isValid = (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/).test(value)\n                break;\n            default:\n                console.log('input id is not supported');\n                break;\n        }\n        return !isValid;\n    }\n\n    createUser = async () => {\n        const {\n            firstName,\n            lastName,\n            documentId,\n            email,\n            cellphone,\n            username,\n            password,\n        } = this.state \n        const { error } = this.props;\n        await this.props.singUp({\n            firstName,\n            lastName,\n            id: documentId,\n            email,\n            phone: cellphone,\n            username,\n            password,\n        });\n\n        if(!error.error){\n            this.props.changePath('');\n        }else{\n            console.log('error --->', error.message);\n        }\n    }\n    returnToLogin = () => {\n        this.props.changePath('');\n    }\n\n    render() {\n        const {\n            username,\n            password,\n            firstName,\n            lastName,\n            documentId,\n            email,\n            cellphone,\n            isfirstNameWrong,\n            islastNameWrong,\n            isdocumentIdWrong,\n            isemailWrong,\n            iscellphoneWrong,\n            isusernameWrong,\n            ispasswordWrong,\n            isValidData\n        } = this.state;\n        return (\n            <div>\n                <nav className=\"navbar navbar-light\" style={{ background: 'linear-gradient(87deg, #e72339 0, #ff9800 100%)' }}>\n                    <h1 style={{\n                        color: 'white',\n                        letterSpacing: 30,\n                        cursor: 'pointer',\n                    }}\n                        onClick={this.returnToLogin}\n                    >SEGURÚ</h1>\n                </nav>\n                <div className={'cardForm'}>\n                    <Card>\n                        <CardHeader color=\"warning\">\n                            <h4>Crea tu cuenta</h4>\n                            <p>Completa el siguiente formulario</p>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"container\">\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Nombre\"\n                                        id=\"firstName\"\n                                        error={isfirstNameWrong}\n                                        formControlProps={{\n                                            fullWidth: true\n                                        }}\n                                        inputProps={{\n                                            value: firstName,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        isfirstNameWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Nombre invalido. Solo se permiten letras</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Apellido\"\n                                        id=\"lastName\"\n                                        error={islastNameWrong}\n                                        formControlProps={{\n                                            fullWidth: true\n                                        }}\n                                        inputProps={{\n                                            value: lastName,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        islastNameWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Apellido invalido. Solo se permiten letras</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Identidad\"\n                                        id=\"documentId\"\n                                        error={isdocumentIdWrong}\n                                        formControlProps={{\n                                            fullWidth: true\n                                        }}\n                                        inputProps={{\n                                            value: documentId,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        isdocumentIdWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Número de Identidad Invalido. Usar guiones</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Correo Electrónico\"\n                                        id=\"email\"\n                                        error={isemailWrong}\n                                        formControlProps={{\n                                            fullWidth: true,\n                                            type: \"email\",\n                                        }}\n                                        inputProps={{\n                                            value: email,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        isemailWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Correo Electrónico invalido.</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Celular\"\n                                        id=\"cellphone\"\n                                        error={iscellphoneWrong}\n                                        formControlProps={{\n                                            fullWidth: true\n                                        }}\n                                        inputProps={{\n                                            value: cellphone,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        iscellphoneWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Número de celular invalido.</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Nombre de Usuario\"\n                                        id=\"username\"\n                                        error={isusernameWrong}\n                                        formControlProps={{\n                                            fullWidth: true\n                                        }}\n                                        inputProps={{\n                                            value: username,\n                                            onChange: this.getInputValues\n                                        }}\n                                    />\n                                    {\n                                        isusernameWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Nombre de usuario invalido. Usar al menos cinco caracteres</p> : ''\n                                    }\n                                </div>\n                                <div className=\"row col-xs-12 col-sm-12 col-md-12\">\n                                    <CustomInput\n                                        labelText=\"Contraseña\"\n                                        id=\"password\"\n                                        isValid={ispasswordWrong}\n                                        formControlProps={{\n                                            fullWidth: true,\n                                        }}\n                                        inputProps={{\n                                            value: password,\n                                            onChange: this.getInputValues,\n                                            type: \"password\",\n                                        }}\n                                    />\n                                    {\n                                        ispasswordWrong ? <p style={{\n                                            fontSize: '11px',\n                                            color: 'red'\n                                        }}>Contraseña invalida. Usar al menos 8 caracteres, una letra mayúscula y un número</p> : ''\n                                    }\n                                </div>\n                            </div>\n                        </CardBody>\n                        <div className=\"submitButton\">\n                            <Button disabled={!isValidData} color=\"primary\" type=\"button\" onClick={this.createUser}>\n                                Crear Usuario\n                        </Button>\n                        </div>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const { error } = state;\n    return {\n        error\n    }\n}\n\nexport default connect(mapStateToProps, { singUp, changePath })(SingUp)"]},"metadata":{},"sourceType":"module"}