{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Form/Form.js\";\nimport '../../styles/Form.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveFilledForm, promptError, promptNotification } from './../../actions';\nimport { Grid } from '@material-ui/core';\nimport Input from './Input';\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport Card from '../Common/Card/Card';\nimport CardHeader from '../Common/Card/CardHeader';\nimport CardBody from '../Common/Card/CardBody';\nimport CardFooter from '../Common/Card/CardFooter';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSubmitButton = () => {\n      const submitButton = this.props.parentForm ? /*#__PURE__*/React.createElement(Button, {\n        color: \"warning\",\n        type: \"button\",\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      }, \"Guardar\") : '';\n      return submitButton;\n    };\n\n    this.renderBackButton = () => {\n      return this.props.parentForm ? /*#__PURE__*/React.createElement(Button, {\n        color: \"warning\",\n        type: \"button\",\n        onClick: this.props.handleBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, \"Regresar\") : '';\n    };\n\n    this.renderQuestions = () => {\n      const shouldInitializeArray = this.props.form.questions.length !== this.completedForm.completedQuestions.length;\n      return this.props.form.questions.map((question, index) => {\n        if (shouldInitializeArray === true) {\n          let questionObject = {};\n          if (question.inputType.tag === 'label') questionObject['label'] = question.question;\n          this.completedForm.completedQuestions.push(questionObject);\n        }\n\n        return /*#__PURE__*/React.createElement(Input, {\n          question: question,\n          onStateChange: this.handleStateChange,\n          requiredQuestion: this.handleRequiredQuestions,\n          index: index,\n          key: 'k' + index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 20\n          }\n        });\n      });\n    };\n\n    this.handleStateChange = (completedQuestion, index) => {\n      this.completedForm.completedQuestions[index] = completedQuestion;\n      if (this.props.subform) this.props.onStateChange(this.completedForm.completedQuestions);\n      if (!this.props.subform) console.log('FORM: ', this.completedForm);\n    };\n\n    this.handleRequiredQuestions = (wasAnswered, index) => {\n      this.answersRequired[index] = wasAnswered;\n      const pendingRequiredAnswers = this.answersRequired.includes(false);\n      this.setState({\n        pendingRequiredAnswers\n      });\n    };\n\n    this.handleClick = async () => {\n      if (this.state.pendingRequiredAnswers) {\n        this.props.promptError('Formulario Incompleto');\n        return;\n      }\n\n      await this.saveForm();\n      this.props.promptNotification('Formulario guardado', 'success');\n      this.props.handleSubmit();\n    };\n\n    this.saveForm = async () => {\n      const {\n        error\n      } = this.props;\n      const timestamp = new Date();\n      const filledForm2Save = {\n        filledForm: JSON.stringify(this.completedForm).split('\"').join('\\''),\n        userId: this.props.user._id,\n        timestamp\n      };\n      const tag = this.props.insurance ? 'insurance' : 'product';\n      filledForm2Save[`${tag}Id`] = this.props[tag]._id;\n      console.log('Saving: ', filledForm2Save);\n      await this.props.saveFilledForm(filledForm2Save);\n    };\n\n    this.state = {\n      pendingRequiredAnswers: true\n    };\n    this.completedForm = {};\n    if (!this.props.subform) this.completedForm['formName'] = this.props.form.formName;\n    this.completedForm['completedQuestions'] = [];\n    this.answersRequired = [];\n  }\n\n  render() {\n    return !this.props.subform ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      md: 12,\n      sm: 12,\n      lg: 12,\n      spacing: 0,\n      zeroMinWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      color: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }\n    }, this.props.form.formName)), /*#__PURE__*/React.createElement(CardBody, {\n      className: \"form-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, this.renderQuestions()), /*#__PURE__*/React.createElement(CardFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 29\n      }\n    }, this.renderBackButton(), this.renderSubmitButton())))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }))) : this.renderQuestions();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.currentUser,\n    insurances: state.insurance.insurances\n  };\n};\n\nexport default connect(mapStateToProps, {\n  saveFilledForm,\n  promptError,\n  promptNotification\n})(Form);","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Form/Form.js"],"names":["React","Component","connect","saveFilledForm","promptError","promptNotification","Grid","Input","Button","Card","CardHeader","CardBody","CardFooter","Form","constructor","props","renderSubmitButton","submitButton","parentForm","handleClick","renderBackButton","handleBack","renderQuestions","shouldInitializeArray","form","questions","length","completedForm","completedQuestions","map","question","index","questionObject","inputType","tag","push","handleStateChange","handleRequiredQuestions","completedQuestion","subform","onStateChange","console","log","wasAnswered","answersRequired","pendingRequiredAnswers","includes","setState","state","saveForm","handleSubmit","error","timestamp","Date","filledForm2Save","filledForm","JSON","stringify","split","join","userId","user","_id","insurance","formName","render","mapStateToProps","currentUser","insurances"],"mappings":"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","sourcesContent":["import '../../styles/Form.css';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { saveFilledForm, promptError, promptNotification } from './../../actions';\n\nimport { Grid } from '@material-ui/core';\n\nimport Input from './Input';\nimport Button from \"../Common/CustomButtons/Button.js\";\nimport Card from '../Common/Card/Card';\nimport CardHeader from '../Common/Card/CardHeader';\nimport CardBody from '../Common/Card/CardBody';\nimport CardFooter from '../Common/Card/CardFooter';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pendingRequiredAnswers: true\n        }\n        this.completedForm = {}\n        if (!this.props.subform) this.completedForm['formName'] = this.props.form.formName;\n        this.completedForm['completedQuestions'] = [];\n        this.answersRequired = [];\n    }\n\n    render() {\n        return (!this.props.subform ? <>\n            <Grid container item xs={12} md={12} sm={12} lg={12} spacing={0} zeroMinWidth={true}>\n                <Grid item sm={2} />\n                <Grid item sm={8}>\n                    <Card>\n                        <CardHeader color='warning'>\n                            <h3>{this.props.form.formName}</h3>\n                        </CardHeader>\n                        <CardBody className='form-body'>\n                            {this.renderQuestions()}\n                        </CardBody>\n                        <CardFooter>\n                            <div>\n                                {this.renderBackButton()}\n                                {this.renderSubmitButton()}\n                            </div>\n                        </CardFooter>\n                    </Card>\n                </Grid>\n                <Grid item sm={2} />\n            </Grid>\n        </> : this.renderQuestions())\n    }\n\n    renderSubmitButton = () => {\n        const submitButton = this.props.parentForm ?\n            <Button color=\"warning\" type=\"button\" onClick={this.handleClick}>\n                Guardar\n                </Button>\n            : '';\n        return submitButton;\n    }\n\n    renderBackButton = () => {\n        return this.props.parentForm ?\n            <Button color=\"warning\" type=\"button\" onClick={this.props.handleBack}>\n                Regresar\n                    </Button>\n            : '';\n    }\n\n    renderQuestions = () => {\n        const shouldInitializeArray = (this.props.form.questions.length !== this.completedForm.completedQuestions.length);\n        return this.props.form.questions.map((question, index) => {\n            if (shouldInitializeArray === true) {\n                let questionObject = {};\n                if (question.inputType.tag === 'label') questionObject['label'] = question.question\n                this.completedForm.completedQuestions.push(questionObject);\n            }\n            return <Input\n                question={question}\n                onStateChange={this.handleStateChange}\n                requiredQuestion={this.handleRequiredQuestions}\n                index={index}\n                key={'k' + index} />\n        })\n    }\n\n    handleStateChange = (completedQuestion, index) => {\n        this.completedForm.completedQuestions[index] = completedQuestion;\n        if (this.props.subform) this.props.onStateChange(this.completedForm.completedQuestions);\n        if (!this.props.subform) console.log('FORM: ', this.completedForm);\n    }\n\n    handleRequiredQuestions = (wasAnswered, index) => {\n        this.answersRequired[index] = wasAnswered;\n        const pendingRequiredAnswers = this.answersRequired.includes(false);\n        this.setState({ pendingRequiredAnswers })\n    }\n\n    handleClick = async () => {\n        if (this.state.pendingRequiredAnswers) {\n            this.props.promptError('Formulario Incompleto');\n            return;\n        }\n        await this.saveForm();\n        this.props.promptNotification('Formulario guardado', 'success');\n        this.props.handleSubmit();\n    }\n\n    saveForm = async () => {\n        const { error } = this.props;\n        const timestamp = new Date();\n        const filledForm2Save = {\n            filledForm: JSON.stringify(this.completedForm).split('\"').join('\\''),\n            userId:  this.props.user._id,\n            timestamp,\n        }\n\n        const tag = this.props.insurance? 'insurance' : 'product'\n        filledForm2Save[`${tag}Id`] = this.props[tag]._id\n        console.log('Saving: ', filledForm2Save);\n\n        await this.props.saveFilledForm(filledForm2Save)\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        user: state.user.currentUser,\n        insurances: state.insurance.insurances,\n    }\n}\n\nexport default connect(mapStateToProps, { saveFilledForm, promptError, promptNotification })(Form);"]},"metadata":{},"sourceType":"module"}