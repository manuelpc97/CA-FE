{"ast":null,"code":"var _jsxFileName = \"/Users/manuel/Documents/CA/ca-fe/src/components/Common/PrivateRoute.js\";\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../../App.js\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n  render: props => localStorage.getItem('isAuth') ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 21\n    }\n  })) : /*#__PURE__*/React.createElement(Redirect, {\n    to: {\n      pathname: \"/\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n})); // const handleComponentView = ({ props, isAuthenticated }) => {\n//     console.log(' handleComponentView ---> isAuthenticated ', isAuthenticated);\n//     if (!isAuthenticated) {\n//         return <p>Please log in</p>\n//     }\n//     return <Component {...props} {...rest} />\n// }\n// return (\n//     <AuthContext.Consumer {...rest}>\n//         {({ isAuthenticated }) => (\n//             <Route\n//                 {...rest}\n//                 render={props =>\n//                     handleComponentView({ props, isAuthenticated })\n//                 }\n//             />\n//         )}\n//     </AuthContext.Consumer>\n// )\n\n\nexport default PrivateRoute;","map":{"version":3,"sources":["/Users/manuel/Documents/CA/ca-fe/src/components/Common/PrivateRoute.js"],"names":["React","Route","Redirect","AuthContext","PrivateRoute","component","Component","rest","props","localStorage","getItem","pathname"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBACjB,oBAAC,KAAD,oBACQA,IADR;AAEI,EAAA,MAAM,EAAEC,KAAK,IACTC,YAAY,CAACC,OAAb,CAAqB,QAArB,iBAEQ,oBAAC,SAAD,oBAAeF,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFR,gBAIQ,oBAAC,QAAD;AACI,IAAA,EAAE,EAAE;AACAG,MAAAA,QAAQ,EAAE;AADV,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADJ,C,CAiBI;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGJ,eAAeP,YAAf","sourcesContent":["import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { AuthContext } from \"../../App.js\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n        {...rest}\n        render={props =>\n            localStorage.getItem('isAuth') ?\n                (\n                    <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: \"/\",\n                        }}\n                    />\n                )\n        }\n    />\n);\n    // const handleComponentView = ({ props, isAuthenticated }) => {\n    //     console.log(' handleComponentView ---> isAuthenticated ', isAuthenticated);\n    //     if (!isAuthenticated) {\n    //         return <p>Please log in</p>\n    //     }\n\n    //     return <Component {...props} {...rest} />\n    // }\n\n    // return (\n    //     <AuthContext.Consumer {...rest}>\n    //         {({ isAuthenticated }) => (\n    //             <Route\n    //                 {...rest}\n    //                 render={props =>\n    //                     handleComponentView({ props, isAuthenticated })\n    //                 }\n    //             />\n    //         )}\n    //     </AuthContext.Consumer>\n    // )\n\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}